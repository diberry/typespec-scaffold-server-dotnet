// Generated by @typespec/http-server-csharp
// <auto-generated />
#nullable enable

using TypeSpec.Helpers;
using System.Security.Authentication;
using System.Net;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews(options =>
{
    options.Filters.Add<HttpServiceExceptionFilter>();
});
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
MockRegistration.Register(builder);

// Configure Kestrel to listen on both IPv4 and IPv6
if (builder.Environment.IsDevelopment())
{
    builder.WebHost.ConfigureKestrel(options =>
    {
        // Listen on IPv4 loopback
        options.Listen(IPAddress.Parse("127.0.0.1"), 5471);
        // Listen on IPv6 loopback
        options.Listen(IPAddress.IPv6Loopback, 5471);
    });
}

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
    app.UseHttpsRedirection();
}
else
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.DocumentTitle = "TypeSpec Generated OpenAPI Viewer";
        c.SwaggerEndpoint("/openapi.yaml", "TypeSpec Generated OpenAPI Docs");
        c.RoutePrefix = string.Empty; // Set Swagger UI at the root
    });
}

app.UseStaticFiles();
app.Use(async (context, next) =>
{
    context.Request.EnableBuffering();
    await next();
});

app.MapGet("/openapi.yaml", async (HttpContext context) =>
{
    var projectFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "openapi.yaml");
    
    // First try in the server directory
    if (!File.Exists(projectFilePath))
    {
        projectFilePath = Path.Combine(Directory.GetCurrentDirectory(), "openapi.yaml");
    }
    
    if (!File.Exists(projectFilePath))
    {
        context.Response.StatusCode = StatusCodes.Status404NotFound;
        await context.Response.WriteAsync("OpenAPI spec not found.");
        return;
    }
    
    context.Response.ContentType = "application/yaml";
    await context.Response.SendFileAsync(projectFilePath);
});

app.UseRouting();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();