// Generated by @typespec/http-server-csharp
// <auto-generated />
#nullable enable

using System;
using System.Net;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using DemoService.Service.Models;
using TypeSpec.Helpers;

namespace DemoService.Service
{
    /// <summary>
    /// This is a mock implementation of the business logic interface for 
    /// demonstration and early development.  Feel free to overwrite this file.
    /// Or replace it with another implementation, and register that implementation 
    /// in the dependency injection container
    /// </summary>
    public class Widgets : IWidgets
    {
        /// <summary>
        /// The controller constructor, using the dependency injection container to satisfy the paramters.
        /// </summary>
        /// <param name="initializer">The initializer class, registered with dependency injection</param>
        /// <param name="accessor">The accessor for the HttpContext, allows your implementation to 
        /// get properties of the incoming request and to set properties of the outgoing response.</param>"
        public Widgets(IInitializer initializer, IHttpContextAccessor accessor)
        {
            _initializer = initializer;
            HttpContextAccessor = accessor;
        }

        private IInitializer _initializer;

        /// <summary>
        /// Use this property in your implementation to access properties of the incoming HttpRequest 
        /// and to set properties of the outgoing HttpResponse
        /// </summary>
        public IHttpContextAccessor HttpContextAccessor { get; }

        public Task<Widget[]> ListAsync()
        {
            return Task.FromResult<DemoService.Service.Models.Widget[]>([]);
        }

        public Task<Widget> ReadAsync(string id)
        {
            return Task.FromResult(_initializer.Initialize<DemoService.Service.Models.Widget>());
        }

        public Task<Widget> CreateAsync(int weight, string color)
        {
            return Task.FromResult(_initializer.Initialize<DemoService.Service.Models.Widget>());
        }

        public Task<Widget> UpdateAsync(string id, int weight, string color)
        {
            return Task.FromResult(_initializer.Initialize<DemoService.Service.Models.Widget>());
        }

        public Task DeleteAsync(string id)
        {
            return Task.CompletedTask;
        }
    }
}
